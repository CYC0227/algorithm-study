import java.util.*;

/*
   풀이 시간: 1시간 30분?
   문제점: 후반에 멍때림, 처음에 아이디어 잘못생각-> dx dy 상하좌우랑 O 어디놓을지... , 장애물 남아있어도 ㄱㅊ
  
   체크사항 주석달아놓기
 */


class Solution {

    public static int N;
    public static char[][] graph;
    //    public static int[] dx = {-1,1,0,0};//상하좌우
//    public static int[] dy = {0,0,-1,1};
    public static int remain = 3;

    public static int firstX;
    public static int firstY;

    public static int nx;
    public static int ny;

    public static boolean breakOption = false;

    public static void convertWithOption(int x, int y, int option){
        if(option == 1){
            nx = x - 1;
            ny = y + 0;
        }
        else if(option == 2){
            nx = x + 1;
            ny = y + 0;
        }
        else if(option == 3){
            nx = x + 0;
            ny = y - 1;
        }
        else if(option == 4){
            nx = x + 0;
            ny = y + 1;
        }
        return;
    }



    public static void dfs(int x, int y, int option) {

        convertWithOption(x,y,option);



        if (nx <= -1 || nx >= N || ny <= -1 || ny >= N)
            return;
        if (graph[nx][ny] == 'O') {
            return;
        }
        if (graph[nx][ny] == 'S') {
            if (isBlocked(nx,ny,option)) {
                remain--;
                return;
            } else {
                breakOption = true;
                return;
            }
        }
        dfs(nx,ny,option);

        return;
    }

    private static boolean isBlocked(int nx, int ny, int option) {
        if(option == 1){
            nx = nx + 1;
            ny = ny + 0;
        }
        else if(option == 2){
            nx = nx - 1;
            ny = ny + 0;
        }
        else if(option == 3){
            nx = nx + 0;
            ny = ny + 1;
        }
        else if(option == 4){
            nx = nx + 0;
            ny = ny - 1;
        }

        if(graph[nx][ny] == 'X'){
            graph[nx][ny] = 'O';
            return true;
        }

        if(graph[nx][ny] == 'T')
            return false;


        return false;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        N = sc.nextInt();
        sc.nextLine();

        graph = new char[N][N];

        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                graph[i][j] = sc.next().charAt(0);
            }
            sc.nextLine();
        }


        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (graph[i][j] == 'T') {

                    dfs(i, j,1);
                    if(breakOption){
                        System.out.println("NO");
                        return;
                    }

                    dfs(i, j,2);
                    if(breakOption){
                        System.out.println("NO");
                        return;
                    }

                    dfs(i, j,3);
                    if(breakOption){
                        System.out.println("NO");
                        return;
                    }

                    dfs(i, j,4);//상하좌우
                    if(breakOption){
                        System.out.println("NO");
                        return;
                    }

                }
            }
        }

//        for (int i = 0; i < N; i++) {
//            for (int j = 0; j < N; j++) {
//                System.out.print(graph[i][j] + " ");
//            }
//            System.out.println();;
//        }

        if (remain >= 0)
            System.out.println("YES");
        else
            System.out.println("NO");

        return;
    }
}